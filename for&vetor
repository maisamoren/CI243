# OBS: Esse exercício é apenas para praticar
#      Não vale nota

# CI243 - UFPR - LAB FOR+Vetor - Nota:   (wz)
# Aluno: 
# matricula: 
#
# Dado o programa C abaixo (em comentarios #) gerar o programa 
#   assemby equivalente do MIPS conforme padroes 
#   de geracao de codigo estudados.
# Gerar apenas a parte relativa ao codigo (parte de dados e
# funcoes de biblioteca ja' foram inseridas abaixo

# IMPORTANTE:
# cada linha do programa foi precedida de comentarios
# assim, DEVEMOS GERAR o programa labForm+vet.asm (assembly) escrevendo:
#    a) para linha programa em C inserir o 
#        codigo MIPS gerado adequadamente PARA CADA linha
#    b) MANTER o original em comentarios
#    c) escreva em assembly SEMPRE alinhando na MARGEM ESQUERDA
#    d) NAO MUDE nada nas linhas de comentarios #, 
#       NAO MUDE o ALINHAMENTO  (-5 pts se fizer isso)

# - NAO DELETE nada, nem os comentarios
# - alterar esse arquivo INSERINDO CODIGO assembly entre linhas
# - o numero de cada QUESTAO estah `a direita em comentarios
# - o valor de cada questao esta' ao final desse arquivo
# - seu codigo devera' funcionar mostrando resultados 
#     se voce nao fizer todas as questoes 

# obs1: o numero 32 equivale ao espaco ' ' na tabela ASCII
# obs2: o numero 10 equivale ao \n na tabela ASCII


#     OBS: executando esse programa a saida serah:
#     0 1 2 3 4 5 6 7 8 9 2 3 4 5 6 7 8 9 10 11 
#     2 1 2 3 4 5 6 7 8 9 7 3 8 5 9 7 10 9 11 11 
#     4 3 4 5 6 5 5 5 5 5 5 5 8 5 9 7 10 9 11 11 

#     // NOTE que o vetor C na linha abaixo é global,
#     // Porque? porque Não sabemos passar vetor como
#     //         parâmetro de função,
#     //         e o vetor é preenchido em main
#     //         e é impresso pela função imprimeVetorC();
#
#     static int C[20];        // vetor C (global)
.data
c: .space 80
#
#     int main ( )                      // linha 
.text
main:
#     {                                 // linha 
#
#            static int A[10], B[10];
.data
A: .space 40
B: .space 40
#            static int i;    
i: .space 4     
#
.text
#            for( i=0; i<10; i++ ) 
			 for1:
			 	  
#                  A[i] = i;
#
#            for( i=0; i<10; i++ ) 
#                  B[i] = A[i]+2;
#
#            for( i=0; i<20; i++ )
#                  if( i < 10 )
#                      C[i] = A[i];
#                  else
#                      C[i] = B[i-10];  
#
#            imprimeVetorC();
#
#            for( i=0; i<10; i++ ) {
#                  C[i] = A[i];
#                  C[i*2] = B[i];
#            }
#
#            imprimeVetorC();
#
#            for( i=0; i<12; i++ )   
#                  C[i] = max5( C[i]+2 );
#            
#            imprimeVetorC();
#
#            exit (0);                  // linha 
#    }                                  // linha 
#

#    int max5( int x )
#    {
#        if( x < 5 )
#           return x;
#        else
#           return 5;
#    }

#    void imprimeVetorC()
#    {        // ......... imprime o Vetor C ...........
#        static int i;
#
#            i=0;
#            while( i<20 ) {
#                  imprimeInt( C[i] );         // linha 
#                  imprimeChar( ' ' ); 
#                  i++;  
#            }
#            imprimeChar( 10 );
#    }
#       


      .text   
#########  rotina para ler numero inteiro e colocar o valor em $v0
readInt:
         li $v0, 5             # numero da funcao readInt
         syscall               # chamar funcao do SO
         jr   $ra              # return

#########  rotina para imprimir numero inteiro que estah em $a0
imprimeInt: li   $v0, 1           # especifica em $V0 a funcao a ser executada
                                  #  nesse caso a funcao Print Integer 
            syscall               # chama funcao do Sistema Operacional
            jr   $ra              # return
	
#########  rotina para imprimir um caracter que estah em $a0
      .text    
imprimeChar: li   $v0, 11         # especifica em $V0 a funcao a ser executada
                                  #   nesse caso a funcao Print Integer 
            syscall               # chama funcao do Sistema Operacional
            jr   $ra              # return

#########  rotina exit que termina programa com valor passado em  $a0
      .text 
exit:   li   $v0, 10          # system call for exit (especifica termino de programa)
        syscall               # we are out of here.  (chama SO para terminar)   
        #veja que nao tem return visto que o programa termina


